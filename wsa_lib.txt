/** @file wsa_lib.txt 
   @brief Contain some code documents for wsa_lib.h
 */

/**
 * @mainpage Introduction
 * The wsa_lib is a library with high level interfaces to 
 * a WSA device. It abstracts away the actual low level interface 
 * and communication through the connection of choice, and subsequently all 
 * the controls or commands to the WSA.  It allows you to easily control 
 * the WSA4000 through standardized command syntax, such as SCPI, to get 
 * WSA status, set gain, set centre frequency, etc., and perform data 
 * acquisition.
 *
 * The wsa_lib supports SCPI for control command syntax and VRT for packet.
 * 
 * @section usage How to use the library
 * The wsa_lib is designed using mixed C/C++ languages.  To use the 
 * library, you need to include the header file, wsa_lib.h, in files that 
 * will use any of its functions to access a WSA, and a link to 
 * the wsa_lib.lib.
 */
 

/** @enum wsa_gain
 * Defines the RF quantized gain settings available for the radio front end 
 * (RFE) of the WSA.
 */
	/** @var wsa_gain::WSA_GAIN_HIGH
	 * High RF amplification. Value 1.
	 */
	/** @var wsa_gain::WSA_GAIN_MED
	 * Medium RF amplification.
	 */
	/** @var wsa_gain::WSA_GAIN_LOW
	 * Low RF amplification.
	 */
	/** @var wsa_gain::WSA_GAIN_VLOW
	 * Very low RF amplification.
	 */
	 

/** @struct wsa_descriptor
 * @brief This structure stores WSA information. 
 */
	/** @var char wsa_descriptor::prod_name
	 * WSA product name.
	 */
	/** @var char wsa_descriptor::prod_serial
	 * WSA product serial number.
	 */
	/** @var char wsa_descriptor::prod_version
	 * WSA product version number.
	 */
	/** @var char wsa_descriptor::rfe_name
	 * WSA product name.
	 */
	/** @var char wsa_descriptor::rfe_version
	 * WSA product version number.
	 */
	/** @var char wsa_descriptor::fw_version
	 * The firmware version currently in the WSA.
	 */
	/** @var char wsa_descriptor::intf_type
	 * The interface method to a WSA.  Available: "TCPIP" ("USB" TBD).
	 */
	/** @var uint64_t wsa_descriptor::inst_bw
	 * The WSA instantaneous bandwidth in Hz. 
	 */
	/** @var uint32_t wsa_descriptor::max_sample_size
	 * The maximum number of continuous I and Q data samples the WSA 
	 * can capture per frame.
	 */
	/** @var uint64_t wsa_descriptor::max_tune_freq
	 * The maximum frequency in Hz that a WSA's RFE can be tuned to.
	 */
	/** @var uint64_t wsa_descriptor::min_tune_freq
	 * The minimum frequency in Hz that a WSA's RFE can be tuned to.
	 */
	/** @var uint64_t wsa_descriptor::freq_resolution
	 * The frequency resolution in Hz that a WSA's centre frequency can be 
	 * incremented.
	 */
	/** @var int wsa_descriptor::max_if_gain
	 * The maximum IF gain in dB that a WSA's RFE can be set.
	 */
	/** @var int wsa_descriptor::min_if_gain
	 * The minimum IF gain in dB that a WSA's RFE can be set.
	 */
	/** @var int32_t wsa_descriptor::min_decimation
	 * The minimum decimation rate that can be set. (Not 0, as 0 is off).
	 */
	/** @var int32_t wsa_descriptor::max_decimation
	 * The maximum decimation rate that can be set.
	 */
	/** @var float wsa_descriptor::abs_max_amp
	 * An array storing the absolute maximum RF input level in dBm for each 
	 * quantized RF gain setting of the RFE. Operating a WSA device at these 
	 * absolute maximums may cause damage to the device.
	 */
 

/** @struct wsa_socket 
 * @brief A structure containing the socket parameters used for creating 
 * TCP/IP connection for control and data acquisition.
 */
	/** @var SOCKET wsa_socket::cmd
	 * The command socket for command controls and queries.  The port 
	 * used for this socket is 37001.
	 */	 
	/** @var SOCKET wsa_socket::data
	 * The data socket used for streaming of data. The port used for this
	 * socket is 37000.
	 */
	 
 
/** @struct wsa_device 
 * @brief A structure containing the components associate with each WSA 
 * device.
 */
	/** @var struct wsa_descriptor wsa_device::descr
	 * The information component of the WSA, stored in wsa_descriptor.
	 */	 
	/** @var struct wsa_socket wsa_device::sock
	 * The socket structure component of the WSA, used for TCPIP connection.
	 */


/** @struct wsa_frame_header
 * @brief This structure contains header information related to each frame read
 * by wsa_read_frame().
 */
	/** @var uint32_t wsa_frame_header::sample_size
	 * Number of {I, Q} samples pairs per WSA data frame.
	 */
	/** @var struct wsa_time wsa_frame_header::time_stamp
	 * The time when a data frame capture begins, stored in wsa_time structure.
	 */


/** @struct wsa_time
 * @brief This structure contains the time information. It is used for the 
 * time stamp in a frame header.
 */
	/** @var uint32_t wsa_time::sec
	 * The number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC.
	 */
	/** @var uint64_t wsa_time::psec
	 * Nanoseconds after the second (0 - 999 999 999).
	 */


/** @struct wsa_resp
 * @brief This structure contains the response information for each query.
 */
	/** @var int32_t wsa_resp::status
	 * The status of the query. Positive number when success, negative when 
	 * failed.
	 */
	 /** @var char wsa_resp::output
	  * The char pointer to an output string responded to a query.
	  */
