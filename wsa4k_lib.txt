/** @file wsa4k_lib.txt 
   @brief Contain some code documents for wsa4k_lib.h
 */

/**
 * @mainpage WSA4000 LIB Documentation
 * @par Overview:
 * The WSA4000 LIB is a library with high level interfaces to a WSA4000 
 * device. It abstracts away the actual low level interface and communication 
 * through the connection of choice, and subsequently all the controls or 
 * commands to the WSA.  It allows you to easily control the WSA4000 through 
 * standardized protocols, such as SCPI, to get WSA status, set gain, 
 * set centre frequency, etc., and perform data acquisition.
 * @par
 * The WSA4000 LIB is designed using mixed C/C++ languages.  To use the 
 * library, you need to include the header file, wsa4k_lib.h, in files that 
 * will use any of its functions to access a WSA4000, and a link to 
 * the wsa4k_lib.lib.
 *
 * @author ThinkRF Corp.
 * @version v1.0
 * @date Aug 9. 2011
 */
 

/** @struct wsa_descriptor
 * @brief This structure stores WSA information. 
 */
	/** @var char wsa_descriptor::prod_name
	 * WSA product name.
	 */
	/** @var char wsa_descriptor::prod_serial
	 * WSA product serial number.
	 */
	/** @var char wsa_descriptor::prod_version
	 * WSA product version number.
	 */
	/** @var char wsa_descriptor::rfe_name
	 * WSA product name.
	 */
	/** @var char wsa_descriptor::rfe_version
	 * WSA product version number.
	 */
	/** @var char wsa_descriptor::fw_version
	 * The firmware version currently in the WSA.
	 */
 
 
/** @struct wsa_device 
 * @brief A structure containing the components associate with each WSA 
 * device.
 */
	/** @var struct wsa_descriptor wsa_device::descr
	 * The information structure component of the WSA.
	 */


/** @struct wsa_pkt_header
 * @brief This structure contains header information related to each packet read
 * by \b wsa_read_pkt().
 */ 
	/** @var uint64_t wsa_pkt_header::freq
	 * The center frequency (Hz) to which the RF PLL is tuned.
	 */
	/** @var char wsa_pkt_header::gain
	 * The amplification in the radio front end at the time the data 
	 * packet is captured.
	 */
	/** @var uint32_t wsa_pkt_header::pkt_size
	 * Number of {I, Q} samples pairs per packet.
	 */
	/** @var struct wsa_time wsa_pkt_header::time_stamp
	 * The time when a data packet capture begins.
	 */


/** @struct wsa_time
 * @brief This structure contains the time information. It is used for the 
 * time stamp in a packet header.
 */
	/** @var int32_t wsa_time::sec
	 * The number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC.
	 */
	/** @var int32_t wsa_time::nsec
	 * Nanoseconds after the second (0 - 999 999 999).
	 */


/** @struct wsa_resp
 * @brief This structure contains the response information for each query.
 */
	/** @var int16_t wsa_resp::status
	 * The status of the query. Positive number when success, negative when 
	 * failed.
	 */
	 /** @char wsa_resp::result
	  * The resulted string responded to a query.
	  */