# give an error because BUILD_PLATFORM variable was not defined by the caller
ifndef BUILD_PLATFORM
$(error You must pass BUILD_PLATFORM=unix or BUILD_PLATFORM=windows to make)
endif

# give an error because BUILD_PLATFORM_ARCHITECTURE variable was not defined by the caller
ifndef BUILD_PLATFORM_ARCHITECTURE
$(error You must pass BUILD_PLATFORM_ARCHITECTURE=32 or BUILD_PLATFORM_ARCHITECTURE=64 to make)
endif

ifeq ($(BUILD_PLATFORM), windows)
PATH_SEPARATOR = \\

VERSION=${shell git describe --dirty=''}

CC = cl
AR = lib
LD = link
LIBS = WS2_32.Lib
CFLAGS = -Wall -W3 -D_CRT_SECURE_NO_WARNINGS -DCLI_VERSION\#\"$(VERSION)\"
COMPILE_ONLY_FLAG = -c
OUTPUT_FILE_FLAG = -Fo
ARFLAGS =
OUTPUT_LIBRARY_FILE_FLAG = -OUT:
LDFLAGS =
OUTPUT_EXECUTABLE_FILE_FLAG = -OUT:

else

PATH_SEPARATOR = /

VERSION=$(shell git describe --dirty='')

CC = gcc
AR = ar
LD = gcc
LIBS = -lm -lrt
CFLAGS = -std=gnu89 -Wall -Wextra -Werror -DCLI_VERSION="\"${VERSION}\""
COMPILE_ONLY_FLAG = -c
OUTPUT_FILE_FLAG = -o 
ARFLAGS = rcs
OUTPUT_LIBRARY_FILE_FLAG =
LDFLAGS = $(CFLAGS)
OUTPUT_EXECUTABLE_FILE_FLAG = -o
endif

BUILD_DIRECTORY = build-$(BUILD_PLATFORM)-$(BUILD_PLATFORM_ARCHITECTURE)
DOCUMENTATION_DIRECTORY = $(BUILD_DIRECTORY)/doc

API_SOURCE_DIR = api/src
API_BUILD_DIR = $(BUILD_DIRECTORY)/api
API_INCLUDE_FILES = $(wildcard api/include/*.h api/include/include-$(BUILD_PLATFORM)/*.h)
API_SOURCE_FILES = $(wildcard $(API_SOURCE_DIR)/*.c $(API_SOURCE_DIR)/src-$(BUILD_PLATFORM)/*.c)
API_OBJECT_FILES = $(API_SOURCE_FILES:$(API_SOURCE_DIR)/%.c=$(API_BUILD_DIR)/%.o)
API_INCLUDE_FLAGS = -Iapi/include -Iapi/include/include-$(BUILD_PLATFORM)
BUILD_LIBRARY_DIRECTORY = $(BUILD_DIRECTORY)/lib
API_TARGET = $(BUILD_LIBRARY_DIRECTORY)/libwsa$(BUILD_PLATFORM_ARCHITECTURE).a
API_DOCUMENTATION_DIRECTORY = $(DOCUMENTATION_DIRECTORY)/api

CLI_SOURCE_DIR = cli/src
CLI_BUILD_DIR = $(BUILD_DIRECTORY)/cli
CLI_INCLUDE_FILES = $(wildcard cli/include/*.h cli/include/include-$(BUILD_PLATFORM)/*.h)
CLI_SOURCE_FILES = $(wildcard $(CLI_SOURCE_DIR)/*.c $(CLI_SOURCE_DIR)/src-$(BUILD_PLATFORM)/*.c)
CLI_OBJECT_FILES = $(CLI_SOURCE_FILES:$(CLI_SOURCE_DIR)/%.c=$(CLI_BUILD_DIR)/%.o)
CLI_INCLUDE_FLAGS = $(API_INCLUDE_FLAGS) -Icli/include -Icli/include/include-$(BUILD_PLATFORM)
BUILD_BINARY_DIRECTORY = $(BUILD_DIRECTORY)/bin
ifeq ($(BUILD_PLATFORM), windows)
CLI_TARGET = $(BUILD_BINARY_DIRECTORY)/wsa.exe
else
CLI_TARGET = $(BUILD_BINARY_DIRECTORY)/wsacli
endif
CLI_DOCUMENTATION_DIRECTORY = $(DOCUMENTATION_DIRECTORY)/cli

BUILD_DIRECTORIES = $(API_BUILD_DIR) $(CLI_BUILD_DIR) $(BUILD_LIBRARY_DIRECTORY) $(BUILD_BINARY_DIRECTORY) $(API_DOCUMENTATION_DIRECTORY) $(CLI_DOCUMENTATION_DIRECTORY)

all : init $(API_TARGET) $(CLI_TARGET)

.PHONY: init
init : 
	-mkdir -p $(BUILD_DIRECTORIES)

$(API_OBJECT_FILES):$(API_BUILD_DIR)/%.o:$(API_SOURCE_DIR)/%.c $(API_INCLUDE_FILES)
	-mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(API_INCLUDE_FLAGS) $(COMPILE_ONLY_FLAG) $(OUTPUT_FILE_FLAG)$@ $<

$(CLI_OBJECT_FILES):$(CLI_BUILD_DIR)/%.o:$(CLI_SOURCE_DIR)/%.c $(CLI_INCLUDE_FILES)
	-mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(CLI_INCLUDE_FLAGS) $(COMPILE_ONLY_FLAG) $(OUTPUT_FILE_FLAG)$@ $<

$(API_TARGET) : $(API_OBJECT_FILES)
	$(AR) $(ARFLAGS) $(OUTPUT_LIBRARY_FILE_FLAG)$(API_TARGET) $(API_OBJECT_FILES)

$(CLI_TARGET) : $(API_TARGET) $(CLI_OBJECT_FILES)
	$(LD) $(LDFLAGS) $(OUTPUT_EXECUTABLE_FILE_FLAG)$(CLI_TARGET) $(CLI_OBJECT_FILES) $(API_TARGET) $(LIBS)
	
.PHONY: doc
doc : init
	export VERSION=$(VERSION) && \
	export API_SOURCE_FILES="$(API_SOURCE_FILES) api/include api/include/include-$(BUILD_PLATFORM)" && \
	export API_DOCUMENTATION_DIRECTORY=$(API_DOCUMENTATION_DIRECTORY) && \
	doxygen DoxyfileApi

.PHONY: clean
clean : 
	-rm -fR $(BUILD_DIRECTORY)
