# give an error because BUILD_PLATFORM variable was not defined by the caller
ifndef BUILD_PLATFORM
$(error You must pass BUILD_PLATFORM=unix or BUILD_PLATFORM=windows to make)
endif

# give an error because BUILD_PLATFORM_ARCHITECTURE variable was not defined by the caller
ifndef BUILD_PLATFORM_ARCHITECTURE
$(error You must pass BUILD_PLATFORM_ARCHITECTURE=32 or BUILD_PLATFORM_ARCHITECTURE=64 to make)
endif

ifeq ($(BUILD_PLATFORM), windows)
PATH_SEPARATOR = \\

VERSION=${shell git describe --dirty=''}

CC = cl
AR = lib
LD = link
LIBS = WS2_32.Lib
CFLAGS = -Wall -W3 -D_CRT_SECURE_NO_WARNINGS -DCLI_VERSION\#\"$(VERSION)\"
COMPILE_ONLY_FLAG = -c
OUTPUT_FILE_FLAG = -Fo
ARFLAGS =
OUTPUT_LIBRARY_FILE_FLAG = -OUT:
LDFLAGS =
OUTPUT_EXECUTABLE_FILE_FLAG = -OUT:

else

PATH_SEPARATOR = /

VERSION=$(shell git describe --dirty='')

CC = gcc
AR = ar
LD = gcc
LIBS = -lm -lrt
#CFLAGS = -std=gnu89 -Wall -Wextra -Werror -DCLI_VERSION="\"${VERSION}\""
CFLAGS = -std=gnu89 -Wall -Wextra -DCLI_VERSION="\"${VERSION}\""
COMPILE_ONLY_FLAG = -c
OUTPUT_FILE_FLAG = -o 
ARFLAGS = rcs
OUTPUT_LIBRARY_FILE_FLAG =
LDFLAGS = $(CFLAGS)
OUTPUT_EXECUTABLE_FILE_FLAG = -o
endif

BUILD_DIRECTORY = build-$(BUILD_PLATFORM)-$(BUILD_PLATFORM_ARCHITECTURE)
DOCUMENTATION_DIRECTORY = $(BUILD_DIRECTORY)/doc

SOURCE_DIR = src
BUILD_DIR = $(BUILD_DIRECTORY)
INCLUDE_FILES = $(wildcard include/*.h include/include-$(BUILD_PLATFORM)/*.h)
SOURCE_FILES = $(wildcard $(SOURCE_DIR)/*.c $(SOURCE_DIR)/src-$(BUILD_PLATFORM)/*.c)
OBJECT_FILES = $(SOURCE_FILES:$(SOURCE_DIR)/%.c=$(BUILD_DIR)/%.o)
INCLUDE_FLAGS = -Iinclude -Iinclude/include-$(BUILD_PLATFORM)
BUILD_LIBRARY_DIRECTORY = $(BUILD_DIRECTORY)/lib
TARGET = $(BUILD_LIBRARY_DIRECTORY)/libwsa$(BUILD_PLATFORM_ARCHITECTURE).a

BUILD_DIRECTORIES = $(BUILD_DIR) $(BUILD_LIBRARY_DIRECTORY) $(BUILD_BINARY_DIRECTORY) $(DOCUMENTATION_DIRECTORY)

all : init $(TARGET)

.PHONY: init
init : 
	-mkdir -p $(BUILD_DIRECTORIES)

$(OBJECT_FILES):$(BUILD_DIR)/%.o:$(SOURCE_DIR)/%.c $(INCLUDE_FILES)
	-mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(INCLUDE_FLAGS) $(COMPILE_ONLY_FLAG) $(OUTPUT_FILE_FLAG)$@ $<

$(TARGET) : $(OBJECT_FILES)
	$(AR) $(ARFLAGS) $(OUTPUT_LIBRARY_FILE_FLAG)$(TARGET) $(OBJECT_FILES)

.PHONY: doc
doc : init
	export VERSION=$(VERSION) && \
	export SOURCE_FILES="$(SOURCE_FILES) include include/include-$(BUILD_PLATFORM)" && \
	export DOCUMENTATION_DIRECTORY=$(DOCUMENTATION_DIRECTORY) && \
	doxygen DoxyfileApi

.PHONY: clean
clean : 
	-rm -fR $(BUILD_DIRECTORY)
